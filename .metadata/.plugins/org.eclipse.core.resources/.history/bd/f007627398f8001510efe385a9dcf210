'
'   This document contains an API for use with the Schedules Direct
'   open source television data service.
'   @author: Hayden McParlane
'   @creation-date: 2.18.2016
Function temp() as void
End Function

Function FetchSchedulesDirectData() as void
    ' TODO: Some of these functions will need to be removed and placed elsewhere. I.e, GetSchedulesDirectAccountStatus() should be called
    ' when the application is first launched from the Roku shell (home screen). That way, account status can be checked asynchronously
    ' to ensure it's ready when the user begins to use it (or, if it's not, the user can be prompted to enter updated account info some
    ' how.    
    PopulateSchedulesDirectToken()
    ' TODO: Modify as appropriate. Cable headends may not need fetch. Only specialty call would get cable headends    
    'PopulateCableHeadends("USA", "66103")    
    PopulateStationsFromLineupUri("/lineups/USA-OTA-66103")
    PopulateProgramsFromStationIds()
    PopulateProgramInfo()
    'TODO: Server error on below call. Figure out why and how to fix.
    'PopulateProgramDescription()
End Function

Function PopulateStationsFromLineupUri(lineupUri as String) as void
    LogInfo("Fetching stations")    
    headers = CreateObject("roAssociativeArray")
    body = CreateObject("roAssociativeArray")
    
    ' 1. Populate headers and body for network packet    
    headers.AddReplace("User-Agent",SchedulesDirectUserAgentHeader())
    ' TODO: Token may not have been populated here, or may need to be refreshed.
    ' How to implement?
    headers.AddReplace("token",GetSchedulesDirectToken())
    
    ' 2. Make request to API
    response = AsyncGetRequest(SchedulesDirectJSONChannelMapUrl(lineupUri), headers, body)       
    
    ' 3. Check server status code (not HTTP status, that's checked in network module)            
    if response.headers["code"] = 3000
        LogErrorObj("Schedules Direct server offline. Try again later.", response.json)
        ' TODO: Program shouldn't be halted. What should be done here?
        stop
    end if          
    
    ' 4. Store data
    AddUpdateSchedulesDirectStations(response.json)

    list = CreateObject("roArray", 1, True)
    ' TODO: Ensure mapping isn't lost or, if it is, that that loss is inconsequential (json includes "map" key. Why if only one array every time?
    ' TODO: Store additional metadata such as for different map types such as cable, etc. Some provide channel art.
    ' This can be found in "channel mapping for a lineup" section in JSON documentation for SD
    mapping = response.json["map"]    
    for each station in mapping         
        data = CreateObject("roAssociativeArray")
        data.AddReplace("stationID", station["stationID"])
        list.Push(data)        
    end for
    AddUpdateSchedulesDirectStationTable(list)
    
    LogDebug("Fetch stations successful")            
End Function

Function PopulateProgramsFromStationIds() as void ' TODO: replace params -> stationIDs as Object
    LogInfo("Fetching programs")    
    headers = CreateObject("roAssociativeArray")    
    station = CreateObject("roAssociativeArray")
    
    ' 1. Populate headers and body for network packet    
    headers.AddReplace("User-Agent",SchedulesDirectUserAgentHeader())
    ' TODO: Token may not have been populated here, or may need to be refreshed.
    ' How to implement?
    headers.AddReplace("token",GetSchedulesDirectToken())
    body = CreateObject("roArray", 4, True)
    ' TODO: Implement such that stations are gathered in efficient manner (all at once slows system) 
    table = GetSchedulesDirectStationTable()
    keyList = table[0].Keys()    
    for i = 0 to TempEntityCount()           
        body.Push(table[i])
    end for               
 
    ' 2. Make request to API
    response = AsyncPostRequest(SchedulesDirectJSONSchedulesUrl(), headers, body)
    
    ' 3. Check server status code (not HTTP status, that's checked in network module)            
    if response.headers["code"] = 3000
        LogErrorObj("Schedules Direct server offline. Try again later.", response.json)
        ' TODO: Program shouldn't be halted. What should be done here?
        stop
    end if          
    
    'processedJSON = ProcessSchedulesDirectJSONStationPrograms(response.json)
    
    ' 4. Store result
    AddUpdateSchedulesDirectPrograms(response.json)
    
    ' TODO: Reduce complexity?
    stations = GetSchedulesDirectPrograms()
    for each station in stations
        AddUpdateChannel(station["stationID"], CreateObject("roAssociativeArray"))
        ' TODO: Create current station filter and populate info
        for each program in station["programs"]
            o = program
            AppendToProgram(program["programID"], o)
        end for 
    end for
        
    programTable = CreateObject("roArray", 1, True)    
    for each station in stations
        for j = 0 to station["programs"].Count() - 1
            programTable.Push(station["programs"][j]["programID"])
            LogDebug("Program ID -> " + station["programs"][j]["programID"])
        end for
    end for    
    AddUpdateSchedulesDirectProgramTable(programTable)
    
    LogDebug("Fetch programs succeeded")            
End Function

Function PopulateProgramInfo() as void ' TODO replace these params -> aProgramIDs as Object
    LogInfo("Fetching program info")    
    headers = CreateObject("roAssociativeArray")
    body = CreateObject("roArray", 1, True)
    
    table = GetSchedulesDirectProgramTable()
    for i = 0 to TempEntityCount()
        body.Push(table[i])
    end for 
    
    'body.Push("SH011425150000")
    'body.Push("SH019486590000")
    
    ' 1. Populate headers and body for network packet    
    headers.AddReplace("User-Agent",SchedulesDirectUserAgentHeader())
    ' TODO: Token may not have been populated here, or may need to be refreshed.
    ' How to implement?
    headers.AddReplace("token",GetSchedulesDirectToken())
    headers.AddReplace("Accept-Encoding","deflate,gzip") ' TODO: Deplate gzip due to bug, may already be fixed
    
    ' 2. Make request to API
    response = AsyncPostRequest(SchedulesDirectJSONProgramInfoUrl(), headers, body)
    
    ' 3. Check server status code (not HTTP status, that's checked in network module)            
    if response.headers["code"] = 3000
        LogErrorObj("Schedules Direct server offline. Try again later.", response.json)
        ' TODO: Program shouldn't be halted. What should be done here?
        stop
    end if          
    
    ' 4. Store result 
    AddUpdateSchedulesDirectProgramInfo(response.json)
    
    ProcessSchedulesDirectJSONProgramInfo(response.json)        

    LogDebug("Fetch program data successful")            
End Function