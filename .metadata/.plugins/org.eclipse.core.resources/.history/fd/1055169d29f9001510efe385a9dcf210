'
'   This document contains an API for use with the Schedules Direct
'   open source television data service.
'   @author: Hayden McParlane
'   @creation-date: 2.18.2016

' TODO: This helper function set will be used to construct a package object
' that ties the network urltransfer id to the station id, program id, whatever.
' This will be used to optimize the network access while keeping track of 
' the operation that's being performed (i.e, get programs associated with
' station id X, etc...).

' TODO: This ~O(n^2) operation needs to be performed but it must be done more
' efficiently. The approach below is prohibitively expensive
'for each station in stations
'    AddUpdateChannel(station["stationID"], CreateObject("roAssociativeArray"))
'    ' TODO: Create current station filter and populate info
'    for each program in station["programs"]
'        o = program
'        AppendToProgram(program["programID"], o)
'    end for 
'end for
Function RequestProgramIDs(stationID as String) as Object
    ' TODO: Store station id?        
    requestID = AsyncPostRequest(SchedulesDirectJSONSchedulesUrl(), headers, body)        
    StoreSchedulesDirectProgramIDRequest(requestID)
End Function

Function StoreSchedulesDirectProgramIDRequest(requestID as Integer) as void
    requests = ProgramIDRequests()    
    requests.Push(requestID)
End Function

Function ProgramIDRequests() as Object
    return CreateIfDoesntExistAndReturn(SchedulesDirectRequests(), "pid", "roArray")
End Function

' Hash table that identifies programIDs that have already been
' processed.
Function SetCaptured(programID as String) as void
    table = ProgramCaptureTable()
    table[programID] = True
End Function

Function AlreadyCaptured(programID as String) as Boolean
    found = False
    table = ProgramCaptureTable()
    if table[programID] ' If program has already been stored
        found = True
    end if
    return found
End Function

Function ProgramCaptureTable() as Object
    return CreateIfDoesntExistAndReturn(SchedulesDirectRequests(), "pct", "roAssociativeArray")
End Function
 
Function SchedulesDirectRequests() as Object
    return CreateIfDoesntExistAndReturn(GetSchedulesDirectNetwork(), "sdrequests", "roAssociativeArray")
End Function



' TODO: Move back into schedules_direct.brs
Function PopulateSchedulesDirectData(stationIDs as Object) as void    
    headers = CreateObject("roAssociativeArray")    
    station = CreateObject("roAssociativeArray")
    
    ' 1. Populate headers and body for network packet    
    headers.AddReplace("User-Agent",SchedulesDirectUserAgentHeader())
    ' TODO: Token may not have been populated here, or may need to be refreshed.
    ' How to implement?
    headers.AddReplace("token",GetSchedulesDirectToken())
    body = CreateObject("roArray", 4, True)            
    for i = 0 to TempEntityCount()           
        body.Push()
    end for
    tmp = CreateObject("roAssociativeArray")
    tmp.AddReplace("stationID","30912")
    body.Push(tmp)               
 
    ' 2. Make request to API
    response = AsyncPostRequest(SchedulesDirectJSONSchedulesUrl(), headers, body)
    
    ' 3. Check server status code (not HTTP status, that's checked in network module)            
    if response.headers["code"] = 3000
        LogErrorObj("Schedules Direct server offline. Try again later.", response.json)
        ' TODO: Program shouldn't be halted. What should be done here?
        stop
    end if          
    
    '######### NEW CODE ##########
    ' Issue async requests
    for each station in stationIDs
        RequestProgramIDs(station)
    end for
    
    ' Process data as it's received. Most recent request is lowest index.
    ' TODO: Further optimization may be achievable by allowing for system to progress
    ' even if the entire requests array isn't processed. I.e, distribute processing
    ' throughout the application but get enough done for users not to notice.
    requests = ProgramIDRequests()
    captureTable = ProgramCaptureTable()
    while requests.Count() <> 0
        for each requestID in requests
            port = requests[requestID]
            msg = wait(100, port)
            if type(msg) = "roUrlEvent" then
                LogDebug("Server response received")
                LogDebugObj("Response Code is ", msg.GetResponseCode())
                ' TODO: Efficiently implement check of different response status codes here and deal
                ' with concerning circumstances appropriately            
                if msg.GetResponseCode() = 200 then
                    response = BuildResponse(msg)
                    
                    AddUpdateSchedulesDirectPrograms(response.json)
                else
                    u.AsyncCancel()
                end if
            else
                ' TODO: Make async request useful instead of blocking
                'LogDebug("Do Useful stuff while wait for data")
            end if
        end for
    end while
    '#############################
    
    'processedJSON = ProcessSchedulesDirectJSONStationPrograms(response.json)
    
    ' 4. Store result
    AddUpdateSchedulesDirectPrograms(response.json)        
End Function
