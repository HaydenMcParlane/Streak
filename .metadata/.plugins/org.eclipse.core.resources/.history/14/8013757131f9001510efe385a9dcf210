'
'   This document contains an API for use with the Schedules Direct
'   open source television data service.
'   @author: Hayden McParlane
'   @creation-date: 2.18.2016

' TODO: This helper function set will be used to construct a package object
' that ties the network urltransfer id to the station id, program id, whatever.
' This will be used to optimize the network access while keeping track of 
' the operation that's being performed (i.e, get programs associated with
' station id X, etc...).

' TODO: This ~O(n^2) operation needs to be performed but it must be done more
' efficiently. The approach below is prohibitively expensive
'for each station in stations
'    AddUpdateChannel(station["stationID"], CreateObject("roAssociativeArray"))
'    ' TODO: Create current station filter and populate info
'    for each program in station["programs"]
'        o = program
'        AppendToProgram(program["programID"], o)
'    end for 
'end for
Function RequestProgramIDs(stationID as String, headers as Object, body as Object) as Object
    ' TODO: Store station id?        
    return AsyncPostRequest(SchedulesDirectJSONSchedulesUrl(), headers, body)            
End Function

Function RequestProgramInfo(programID as String, headers as Object, body as Object) as Object
    ' TODO: Store program id?
    ' Check to ensure that request is necessary
    if AlreadyFetched(programID)
        ' Do nothing
    else         
        requestID = AsyncPostRequest(SchedulesDirectJSONProgramInfoUrl(), headers, body)
        StoreSchedulesDirectProgramInfoRequest(requestID)
        SetFetched(programID)
    end if    
End Function

Function StoreSchedulesDirectProgramIDRequest(requestID as Integer) as void
    requests = ProgramIDRequests()    
    requests.Push(requestID)
End Function

Function StoreSchedulesDirectProgramInfoRequest(requestID as Integer) as void
    requests = ProgramInfoRequests()    
    requests.Push(requestID)
End Function

Function ProgramIDRequests() as Object
    return CreateIfDoesntExistAndReturn(SchedulesDirectRequests(), "pid", "roArray")
End Function

Function ProgramInfoRequests() as Object
    return CreateIfDoesntExistAndReturn(SchedulesDirectRequests(), "pinfo", "roArray")
End Function

' Hash table that identifies programIDs that have already been
' processed.
Function SetProcessed(programID as String) as void
    table = ProgramProcessedTable()
    table[programID] = True
End Function

Function AlreadyProcessed(programID as String) as Boolean
    found = False
    table = ProgramProcessedTable()
    if table[programID] ' If program has already been stored
        found = True
    end if
    return found
End Function

Function ProgramProcessedTable() as Object
    return CreateIfDoesntExistAndReturn(SchedulesDirectRequests(), "pct", "roAssociativeArray")
End Function
 
Function SchedulesDirectRequests() as Object
    return CreateIfDoesntExistAndReturn(GetSchedulesDirectNetwork(), "sdrequests", "roAssociativeArray")
End Function

' TODO: Move back into schedules_direct.brs
Function PopulateSchedulesDirectData(stationIDs as Object) as void    
    headers = CreateObject("roAssociativeArray")    

    ' Process data as it's received. Most recent request is lowest index.
    ' TODO: Further optimization may be achievable by allowing for system to progress
    ' even if the entire requests array isn't processed. I.e, distribute processing
    ' throughout the application but get enough done for users not to notice.
    headers.AddReplace("User-Agent",SchedulesDirectUserAgentHeader())
    
    idBuffer = CreateObject("roArray", 1, True) ' Buffer needed to reverse order of request IDs because
    for each station in stationIDs              ' stack pop operation is done from tail of list. This means
        id = RequestProgramIDs(station)         ' that deletions from the head require ~(O(num_requests) PER
        idBuffer.Push(id)                       ' request removal. That's ~(O(num_requests ^ 2))
    end for
    
    ' Reverse request order so pop is constant time operation
    requests = CreateObject("roArray", idBuffer.Count(), True)
    for each requestID in idBuffer
        
    end for
    StoreSchedulesDirectProgramIDRequest(requestID)
    
    ' TODO: Token may not have been populated here, or may need to be refreshed.
    ' How to implement?
    headers.AddReplace("token",GetSchedulesDirectToken())
    headers.AddReplace("Accept-Encoding","deflate,gzip")
    requests = ProgramIDRequests()
    captureTable = ProgramCaptureTable()
    while requests.Count() <> 0
        for each requestID in requests
            port = requests[requestID]
            msg = wait(100, port)
            if type(msg) = "roUrlEvent" then
                LogDebug("Server response received")
                LogDebugObj("Response Code is ", msg.GetResponseCode())
                ' TODO: Efficiently implement check of different response status codes here and deal
                ' with concerning circumstances appropriately            
                if msg.GetResponseCode() = 200 then
                    ' TODO: If only one station is processed per request, this can be left alone.
                    ' If more are processed, it may be necessary for add another for-each loop
                    ' with the for-each program loop below nested within it.
                    response = BuildResponse(msg)
                    
                    ' Immediately initiate requests for program info
                    for each program in response.json[0]["programs"]
                        ' Create program object for quick access later
                        if AlreadyProcessed(programID)
                            ' Do nothing
                        else
                            pid = program["programID"]
                            RequestProgramInfo(pid, headers, body)
                            info = program                            
                            AppendToProgram(program[pid], info)
                        end if    
                    end for
                    
                    AddUpdateSchedulesDirectPrograms(response.json)
                    
                    ' Update programID requests
                    requests.
                else
                    ' TODO: What should happen with non 200 response codes? 
                    u.AsyncCancel()
                end if
            else
                ' TODO: Make async request useful instead of blocking
                'LogDebug("Do Useful stuff while wait for data")
            end if
        end for
    end while
    
    ' 4. Store result
    AddUpdateSchedulesDirectPrograms(response.json)        
End Function
